#!/usr/bin/env node

/**
 * Module dependencies.
 */
var debug = require('debug')('insta:server');
var http = require('http');
var socketIO = require('socket.io');
var setupApp = require('../app'); // Import the setupApp function

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || '3001');

/**
 * Initialize the app and attach Socket.IO
 */
var httpServer = http.createServer(); // Create the HTTP server
var io = socketIO(httpServer); // Attach Socket.IO to the HTTP server
var app = setupApp(io); // Initialize the app with Socket.IO

// Set the port for the app
app.set('port', port);

// Attach the app to the server
httpServer.on('request', app); // Serve the app via the HTTP server

/**
 * Listen on provided port, on all network interfaces.
 */
httpServer.listen(port);
httpServer.on('error', onError);
httpServer.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    return val; // named pipe
  }

  if (port >= 0) {
    return port; // port number
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = httpServer.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
